import { api, LightningElement, track } from 'lwc';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';


export default class CreateModularTableForForms extends LightningElement {
    @api isViewMode;
    @api isUpadteForm;
    privateSection;
    @api
    get section() {
        return this.privateSection;
    }

    set section(value) {
        this.privateSection = value;
    }

    // data contains all rows to be displayed 
    @track privateSectionData = [];
    privateSectionDataTmp = [];

    @api
    get sectionData() {
        return this.privateSectionData;
    }

    set sectionData(value) {
        try {
            this.privateSectionDataTmp = value;
        } catch (error) {
            console.error('error: ', error.name);
            console.error('error message: ', error.message);
            console.error('error stack: ', error.stack);
        }


    }

    get iconColumnClass() {
        let VIEW_MODE_ICON_COLUMN_CLASS = "iconColumn iconViewMode";
        let EDIT_MODE_ICON_COLUMN_CLASS = "iconColumn";

        if (this.isViewMode) {
            return VIEW_MODE_ICON_COLUMN_CLASS;
        }
        
        return EDIT_MODE_ICON_COLUMN_CLASS;
    }

    get iconCellClass() {
        let VIEW_MODE_ICON_CELL_CLASS = "iconCell iconViewMode";
        let EDIT_MODE_ICON_CELL_CLASS = "iconCell";

        if (this.isViewMode) {
            return VIEW_MODE_ICON_CELL_CLASS;
        }

        return EDIT_MODE_ICON_CELL_CLASS;
    }

    // next rowIndex is generated by adding one to current rowIndex
    // to make our rowIndex start at 0 we are starting at -1
    rowIndex = -1;
    rowTemplate = [];

    connectedCallback() {
        if (this.isUpadteForm === "true") {
            this.privateSectionData = JSON.parse(JSON.stringify(this.privateSectionDataTmp[this.section.ElixirSuite__Section_Number__c]));
            this.privateSectionDataTmp = [];

            this.rowIndex = this.privateSectionData.length - 1;
            this.generateRowTemplate();

        }
        else {
            // formUniqueId is not available meaning we have to create a new modular table for this form
            this.isViewMode = false;

            // let sectionClone = structuredClone(this.section);
            // sectionClone.ElixirSuite__Object_1_css__r = this.privateSectionData;
            // this.section = sectionClone;


            this.generateRowTemplate();
            this.addRow();

            console.log('section in mod: ' , JSON.stringify(this.privateSection));
            // console.log('dataType reach: ', JSON.stringify(this.privateSection.ElixirSuite__Object_1_css__r[0].Columns));
            // let dataTypeReach = this.privateSection.ElixirSuite__Object_1_css__r[0].Columns;
            // for (const i of this.privateSection.ElixirSuite__Object_1_css__r[0].Columns) {
            //     console.log('datatype1: ', i.ElixirSuite__Data_Type__c);
            // }

            // let columnDataType = ['text', 'number'];
            // console.log('expected data type: ', JSON.stringify(columnDataType));

            // let dataTypeArray = 
            // console.log('expected data type: ', JSON.stringify(dataTypeArray));

        }
    }

    generateRowTemplate() {
        this.rowTemplate = [];

        //let fields = this.privateSection.ElixirSuite__Modular_Matrix_Fields__c.split(';');
        //let dataTypes = this.privateSection.ElixirSuite__Modular_Matrix_Data_Type__c.split(';');
        //"ElixirSuite__Modular_Matrix_field_JSON__c" =[{"Field name": "Data type"}]
        //let fieldToDataTypeMap = JSON.parse(this.privateSection.ElixirSuite__Modular_Matrix_Field_JSON__c);
        //let columnDataType = this.privateSection.ElixirSuite__Modular_Matrix_DataType__c.split(';');
        let columnDataType = this.privateSection.ElixirSuite__Object_1_css__r[0].Columns.map(column => column.ElixirSuite__Data_Type__c);
        console.log(columnDataType);

        // if some sectionData is provided, check saved data and provided headings/datatypes to figure out if configuration is changed
        // if changes are there render modular table in view mode
        if (this.privateSectionData.length != 0) {
            try {
                if (!this.isViewMode){
                    if (!(this.privateSectionData[0].columns.length === columnDataType.length && this.privateSectionData[0].columns.length === this.privateSection.ElixirSuite__Headings__c.length)) {
                        this.isViewMode = true;
                        const event = new ShowToastEvent({
                            variant: 'warning',
                            title: `Read only modular table in section ${this.section.ElixirSuite__Section_Number__c}`,
                            message:
                                'Form configration for this modular table was modified since this form was last saved. It will appear readonly for this form.',
                        });
                        this.dispatchEvent(event);
                        return;
                    }
                }
            } catch (error) {
                console.error('error: ', error.name);
                console.error('error message: ', error.message);
                console.error('error stack: ', error.stack);
            }

        }

        let columnCount = 0;
        let templateColumn;
        for (const i of columnDataType) {
            // this.rowTemplate = [
            //     {dataType: 'text', value: null, columnNumber: 0},
            //     {dataType: 'number', value: null, columnNumber: 1},
            // ];
            templateColumn = {};
            templateColumn.dataType = i;
            templateColumn.value = null;
            templateColumn.columnNumber = columnCount;

            // Handle any special datatype here.
            // If you do this, change modularMatrixColumn class in pdf generator's apex controller too
            switch (i) {
                case 'text':
                    templateColumn.isText = true;
                    break

                case 'textarea':
                    templateColumn.isTextArea = true;
                    break;
                
                case 'date':
                    templateColumn.isdate = true;
                    break;
            
                case 'datetime':
                    templateColumn.isdatetime = true;
                    break;

                case 'number':
                    templateColumn.isNumber = true;
                    break;

                default:
                    break;     
            }

            this.rowTemplate.push(templateColumn);
            columnCount++;
        }

        console.log('generateRowTemplate: ', JSON.stringify(this.rowTemplate));
    }

    addRow() {
        let row = {};
        row.columns = JSON.parse(JSON.stringify(this.rowTemplate));

        this.rowIndex++;
        row.rowNumber = JSON.parse(JSON.stringify(this.rowIndex));
        this.privateSectionData.push(row);
        //console.log('added blank row to section data: ', JSON.stringify(this.privateSectionData));

        this.fireprivateSectionDataUpadtedEvent();
    }

    deleteRow(event) {
        // name field stores row number.
        this.privateSectionData.splice(event.target.name, 1);

        // recalculate rowNumber after every deletion
        let totalRows = this.privateSectionData.length;
        this.rowIndex = totalRows - 1;
        for (let i = 0; i < totalRows; i++) {
            this.privateSectionData[i].rowNumber = i;
        }
        //console.log('deleted row from section data: ', JSON.stringify(this.privateSectionData));

        this.fireprivateSectionDataUpadtedEvent();
    }

    updateValue(event) {
        // name field stores row number. label field stores column number
        try {
            let row = event.target.name;
            let column = event.target.label;

            this.privateSectionData[row].columns[column].value = event.target.value;

            this.fireprivateSectionDataUpadtedEvent();
        } catch (error) {
            console.error('error: ', error.name);
            console.error('error message: ', error.message);
            console.error('error stack: ', error.stack);
        }
    }

    fireprivateSectionDataUpadtedEvent() {
        let sectionNumber = this.section.ElixirSuite__Section_Number__c;
        let data = this.privateSectionData;
        const updateValueEvent = new CustomEvent('SectionDataUpdate', { detail: { sectionNumber, data } });
        this.dispatchEvent(updateValueEvent);
    }
}